name: Deploy Terraform Cloud using Git Tag
run-name: "Deploying ${{ inputs.workspace }} with tag ${{ inputs.tag }}"

on:
  workflow_dispatch:
    inputs:
      folder:
        description: "Terraform folder"
        required: true
        type: choice
        options:
          - "./infra/environment/dev"
          - "./infra/environment/prod"

      workspace:
        description: "Terraform Cloud workspace"
        required: true
        type: choice
        options:
          - "amazon-lex-v2"
          - "another-workspace"

      tag:
        description: "Git tag to deploy (e.g. v0.0.7)"
        required: true

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Check if tag exists in GitHub
        run: |
          REPO="${{ github.repository }}"
          TAG="${{ inputs.tag }}"

          echo "Checking if tag '$TAG' exists in repo '$REPO'..."

          STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer ${GITHUB_TOKEN}" \
            "https://api.github.com/repos/${REPO}/git/ref/tags/${TAG}")

          if [[ "$STATUS" != "200" ]]; then
            echo "❌ Tag '$TAG' does not exist in the repository. Aborting."
            exit 1
          else
            echo "✅ Tag '$TAG' exists. Continuing."
          fi

      - name: Lookup Terraform Cloud workspace ID
        id: lookup
        run: |
          WORKSPACE_NAME="${{ inputs.workspace }}"
          JSON_PATH=".github/tfc-workspaces.json"

          if [[ ! -f "$JSON_PATH" ]]; then
            echo "Error: Mapping file not found at $JSON_PATH"
            exit 1
          fi

          WORKSPACE_ID=$(jq -r --arg name "$WORKSPACE_NAME" '.[$name]' "$JSON_PATH")
          if [[ "$WORKSPACE_ID" == "null" ]]; then
            echo "Workspace '$WORKSPACE_NAME' not found"
            exit 1
          fi

          echo "Workspace ID: $WORKSPACE_ID"
          echo "WORKSPACE_ID=$WORKSPACE_ID" >> $GITHUB_ENV

      - name: Create configuration version with tag
        run: |
          RESPONSE=$(curl -s \
            --header "Authorization: Bearer ${TF_API_TOKEN}" \
            --header "Content-Type: application/vnd.api+json" \
            --request POST \
            --data '{
              "data": {
                "type":"configuration-versions",
                "attributes": {
                  "auto-queue-runs": false,
                  "vcs-revision":"'"${{ inputs.tag }}"'"
                },
                "relationships": {
                  "workspace": {
                    "data": {
                      "type":"workspaces",
                      "id":"'"${WORKSPACE_ID}"'"
                    }
                  }
                }
              }
            }' \
            https://app.terraform.io/api/v2/workspaces/${WORKSPACE_ID}/configuration-versions)

          CONFIG_VERSION_ID=$(echo "$RESPONSE" | jq -r '.data.id')
          if [[ -z "$CONFIG_VERSION_ID" || "$CONFIG_VERSION_ID" == "null" ]]; then
            echo "Failed to create configuration version"
            echo "$RESPONSE"
            exit 1
          fi

          echo "CONFIG_VERSION_ID=$CONFIG_VERSION_ID" >> $GITHUB_ENV
          echo "Created configuration version: $CONFIG_VERSION_ID"

      - name: Wait for configuration version to be processed
        run: |
          echo "Waiting for configuration version to be ready..."
          MAX_WAIT=300
          WAITED=0
          INTERVAL=5

          while [[ $WAITED -lt $MAX_WAIT ]]; do
            STATUS=$(curl -s \
              --header "Authorization: Bearer ${TF_API_TOKEN}" \
              https://app.terraform.io/api/v2/configuration-versions/${CONFIG_VERSION_ID} \
              | jq -r '.data.attributes.status')

            echo "Waited ${WAITED}s: status = $STATUS"

            if [[ "$STATUS" == "uploaded" ]]; then
              echo "Configuration version is ready!"
              break
            elif [[ "$STATUS" == "errored" ]]; then
              echo "Configuration version failed processing!"
              exit 1
            fi

            sleep $INTERVAL
            WAITED=$((WAITED + INTERVAL))
          done

          if [[ "$STATUS" != "uploaded" ]]; then
            echo "Timed out after ${MAX_WAIT}s waiting for configuration to be ready."
            exit 1
          fi

      - name: Trigger Terraform Cloud run
        run: |
          curl -s \
            --header "Authorization: Bearer ${TF_API_TOKEN}" \
            --header "Content-Type: application/vnd.api+json" \
            --data '{
              "data": {
                "type": "runs",
                "attributes": {
                  "is-destroy": false,
                  "message": "Deploying tag '"${{ inputs.tag }}"' via GitHub Actions"
                },
                "relationships": {
                  "workspace": {
                    "data": {
                      "type": "workspaces",
                      "id": "'"${WORKSPACE_ID}"'"
                    }
                  },
                  "configuration-version": {
                    "data": {
                      "type": "configuration-versions",
                      "id": "'"${CONFIG_VERSION_ID}"'"
                    }
                  }
                }
              }
            }' \
            "https://app.terraform.io/api/v2/runs"

          echo "✅ Triggered Terraform run on workspace ${{ inputs.workspace }} with tag ${{ inputs.tag }}"
