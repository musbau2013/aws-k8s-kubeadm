name: Semantic Version Tagging on PR Merge hfhfjdfdjhdfdfdfdjfldkjhfdlfkj

on:
  pull_request:
    types: [closed]
    branches:
      - main
      - master

jobs:
  tag-version:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Required for full git history
        ref: ${{ github.event.pull_request.merge_commit_sha }}

    - name: Get current version
      id: current-version
      run: |
        # Fetch all tags
        git fetch --tags
        
        # Get the latest tag that matches vX.Y.Z pattern
        CURRENT_TAG=$(git describe --tags --abbrev=0 --match "v[0-9]*.[0-9]*.[0-9]*" 2>/dev/null || echo "v0.0.0")
        echo "Current tag: $CURRENT_TAG"
        
        # Extract version components
        VERSION=${CURRENT_TAG#v}
        MAJOR=$(echo $VERSION | cut -d. -f1)
        MINOR=$(echo $VERSION | cut -d. -f2)
        PATCH=$(echo $VERSION | cut -d. -f3)
        
        echo "major=$MAJOR" >> $GITHUB_OUTPUT
        echo "minor=$MINOR" >> $GITHUB_OUTPUT
        echo "patch=$PATCH" >> $GITHUB_OUTPUT
        echo "current_version=$VERSION" >> $GITHUB_OUTPUT

    - name: Analyze PR commits for version bump
      id: bump-version
      run: |
        # Default to patch level bump
        BUMP_LEVEL="patch"
        
        # Get the range of commits in this PR
        FIRST_COMMIT=$(git rev-list --max-parents=0 HEAD)
        LAST_COMMIT=${{ github.event.pull_request.merge_commit_sha }}
        
        # Check for feature commits (minor bump)
        if git log --pretty=format:"%s" $FIRST_COMMIT..$LAST_COMMIT | grep -qE '^(feat|feature)\(?.*\)?:'; then
          BUMP_LEVEL="minor"
          echo "Found feature commits - bumping minor version"
        fi
        
        # Check for breaking changes (major bump)
        if git log --pretty=format:"%b" $FIRST_COMMIT..$LAST_COMMIT | grep -q 'BREAKING CHANGE'; then
          BUMP_LEVEL="major"
          echo "Found breaking changes - bumping major version"
        fi
        
        # Also check PR title for version bump indicators
        PR_TITLE="${{ github.event.pull_request.title }}"
        if [[ $PR_TITLE =~ (breaking change|major) ]]; then
          BUMP_LEVEL="major"
          echo "PR title indicates major version bump"
        elif [[ $PR_TITLE =~ (feat|feature) ]]; then
          if [ "$BUMP_LEVEL" != "major" ]; then
            BUMP_LEVEL="minor"
            echo "PR title indicates minor version bump"
          fi
        fi
        
        echo "bump_level=$BUMP_LEVEL" >> $GITHUB_OUTPUT

    - name: Calculate new version
      id: new-version
      run: |
        case "${{ steps.bump-version.outputs.bump_level }}" in
          major)
            NEW_MAJOR=$(( ${{ steps.current-version.outputs.major }} + 1 ))
            NEW_VERSION="v${NEW_MAJOR}.0.0"
            ;;
          minor)
            NEW_MINOR=$(( ${{ steps.current-version.outputs.minor }} + 1 ))
            NEW_VERSION="v${{ steps.current-version.outputs.major }}.${NEW_MINOR}.0"
            ;;
          *)
            NEW_PATCH=$(( ${{ steps.current-version.outputs.patch }} + 1 ))
            NEW_VERSION="v${{ steps.current-version.outputs.major }}.${{ steps.current-version.outputs.minor }}.${NEW_PATCH}"
            ;;
        esac
        
        echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT
        echo "New version will be: ${NEW_VERSION}"

    - name: Create and push new tag
      if: ${{ steps.new-version.outputs.new_version != '' }}
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git tag -a "${{ steps.new-version.outputs.new_version }}" -m "Release ${{ steps.new-version.outputs.new_version }}"
        git push origin "${{ steps.new-version.outputs.new_version }}"
        echo "Created tag ${{ steps.new-version.outputs.new_version }}"

    - name: Create GitHub Release
      if: ${{ steps.new-version.outputs.new_version != '' }}
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.new-version.outputs.new_version }}
        release_name: Release ${{ steps.new-version.outputs.new_version }}
        body: |
          This release was automatically created when PR #${{ github.event.pull_request.number }} was merged.
          
          **Changes:**
          ${{ github.event.pull_request.body }}
        draft: false
        prerelease: false